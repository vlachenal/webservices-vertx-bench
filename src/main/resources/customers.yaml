openapi: 3.0.0
info:
  title: Customer API
  version: '1.0'
  description: Customer API
  contact:
    name: Vincent Lachenal
    email: vincent.lachenal@gmail.com
    url: 'https://github.com/vlachenal/webservices-vertx-bench'
  license:
    name: WTFPL
    url: 'http://www.wtfpl.net/txt/copying/'
paths:
  /customers:
    get:
      summary: List Customer
      operationId: findCustomers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer-output'
              examples:
                response:
                  value:
                    - id: d49eb603-db26-4508-ae61-e4456bc3a022
                      first_name: Chuck
                      last_name: Norris
                    - id: 68de2955-a1eb-440a-bc9a-7004d035724d
                      first_name: Steven
                      last_name: Seagal
        '404':
          $ref: '#/components/responses/error-response'
      description: Look for customers
      tags:
        - customer
    post:
      summary: Create Customer
      operationId: createCustomer
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-output-detailed'
              examples:
                response:
                  value:
                    id: d49eb603-db26-4508-ae61-e4456bc3a022
                    first_name: Chuck
                    last_name: Norris
                    birth_name: '1940-03-10'
                    email: chuck.norris@yopmail.com
        '409':
          $ref: '#/components/responses/error-response'
      description: Create new customer
      tags:
        - customer
      requestBody:
        $ref: '#/components/requestBodies/customer-input'
  '/customers/{customerId}':
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get Customer
      operationId: getCustomer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-output-detailed'
              examples:
                response:
                  value:
                    id: d49eb603-db26-4508-ae61-e4456bc3a022
                    first_name: Chuck
                    last_name: Norris
                    birth_name: '1940-03-10'
                    email: chuck.norris@yopmail.com
        '404':
          $ref: '#/components/responses/error-response'
      description: Get customer details
      tags:
        - customer
    put:
      summary: Update Customer
      operationId: updateCustomer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-output-detailed'
              examples:
                response:
                  value:
                    id: d49eb603-db26-4508-ae61-e4456bc3a022
                    first_name: Chuck
                    last_name: Norris
                    birth_name: '1940-03-10'
                    email: chucknorris@yopmail.com
        '404':
          $ref: '#/components/responses/error-response'
        '409':
          $ref: '#/components/responses/error-response'
      description: Update customer
      tags:
        - customer
      requestBody:
        $ref: '#/components/requestBodies/customer-input'
    delete:
      summary: Delete Customer
      operationId: deleteCustomer
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/error-response'
      description: Delete customer
      tags:
        - customer
  '/customers/{customerId}/phones':
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List Phone
      operationId: findPhones
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/phone-output-detailed'
        '404':
          $ref: '#/components/responses/error-response'
      description: Look for phones
      tags:
        - phone
    post:
      summary: Create Phone
      operationId: createPhone
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/phone-output-detailed'
        '409':
          $ref: '#/components/responses/error-response'
      description: Create new phone
      tags:
        - phone
      requestBody:
        $ref: '#/components/requestBodies/phone-input'
  '/customers/{customerId}/phones/{phoneId}':
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: phoneId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get Phone
      operationId: getPhone
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/phone-output-detailed'
        '404':
          $ref: '#/components/responses/error-response'
      description: Get phone details
      tags:
        - phone
    put:
      summary: Update Phone
      operationId: updatePhone
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/phone-output-detailed'
        '404':
          $ref: '#/components/responses/error-response'
        '409':
          $ref: '#/components/responses/error-response'
      description: Update phone
      tags:
        - phone
      requestBody:
        $ref: '#/components/requestBodies/phone-input'
    delete:
      summary: Delete Phone
      operationId: deletePhone
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/error-response'
      description: Delete phone
      tags:
        - phone
  '/customers/{customerId}/addresses':
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List Address
      operationId: findAddresses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/address-output'
        '404':
          $ref: '#/components/responses/error-response'
      description: Look for address
      tags:
        - address
    post:
      summary: Create Address
      operationId: createAddress
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address-output-detailed'
        '409':
          $ref: '#/components/responses/error-response'
      description: Create new address
      tags:
        - address
      requestBody:
        $ref: '#/components/requestBodies/address-input'
  '/customers/{customerId}/addresses/{addressId}':
    parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: addressId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get Address
      operationId: getAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address-output-detailed'
        '404':
          $ref: '#/components/responses/error-response'
      description: Get address details
      tags:
        - address
    put:
      summary: Update Address
      operationId: updateAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address-output-detailed'
        '404':
          $ref: '#/components/responses/error-response'
        '409':
          $ref: '#/components/responses/error-response'
      description: Update address
      tags:
        - address
      requestBody:
        $ref: '#/components/requestBodies/address-input'
    delete:
      summary: Delete Address
      operationId: deleteAddress
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/error-response'
      description: Delete address
      tags:
        - address
tags:
  - name: address
    description: Address resources
  - name: phone
    description: Phone resources
  - name: customer
    description: Customer resources
servers:
  - url: 'http://kakita:8080/vertx'
components:
  responses:
    error-response:
      description: Error model
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            required:
              - status
              - message
          examples:
            response:
              value:
                status: NOT_FOUND
                message: >-
                  Customer d49eb603-db26-4508-ae61-e4456bc3a022 has not been
                  found
  requestBodies:
    address-input:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/address-input'
    customer-input:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/customer-input'
    phone-input:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/phone-input'
  schemas:
    customer-common:
      title: Customer Common
      description: >-
        The properties that are shared amongst all versions of the Customer
        model.
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        birth_name:
          type: string
          format: date
        email:
          type: string
          format: email
      required:
        - first_name
        - last_name
    customer-input:
      title: Customer Input
      description: The properties that are allowed when creating or updating a Customer.
      allOf:
        - $ref: '#/components/schemas/customer-common'
        - type: object
          properties: {}
    customer-output:
      title: Customer Output
      description: The properties that are included when fetching a list of Customers.
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/customer-common'
    customer-output-detailed:
      title: Customer Output Detailed
      description: The properties that are included when fetching a single Customer.
      allOf:
        - $ref: '#/components/schemas/customer-output'
        - type: object
          properties: {}
    phone-common:
      title: Phone Common
      description: The properties that are shared amongst all versions of the Phone model.
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - LANDLINE
            - MOBILE
        number:
          type: string
      required:
        - type
        - number
    phone-input:
      title: Phone Input
      description: The properties that are allowed when creating or updating a Phone.
      allOf:
        - $ref: '#/components/schemas/phone-common'
        - type: object
          properties: {}
    phone-output:
      title: Phone Output
      description: The properties that are included when fetching a list of Phones.
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/phone-common'
    phone-output-detailed:
      title: Phone Output Detailed
      description: The properties that are included when fetching a single Phone.
      allOf:
        - $ref: '#/components/schemas/phone-output'
        - type: object
          properties: {}
    address-common:
      title: Address Common
      description: >-
        The properties that are shared amongst all versions of the Address
        model.
      type: object
      properties:
        id:
          type: string
          format: uuid
        lines:
          type: array
          minItems: 1
          maxItems: 6
          items:
            type: string
        zip_code:
          type: string
        city:
          type: string
        country:
          type: string
      required:
        - lines
        - zip_code
        - city
        - country
    address-input:
      title: Address Input
      description: The properties that are allowed when creating or updating a Address.
      allOf:
        - $ref: '#/components/schemas/address-common'
        - type: object
          properties: {}
    address-output:
      title: Address Output
      description: The properties that are included when fetching a list of Addresses.
      allOf:
        - type: object
          properties: {}
        - $ref: '#/components/schemas/address-common'
    address-output-detailed:
      title: Address Output Detailed
      description: The properties that are included when fetching a single Address.
      allOf:
        - $ref: '#/components/schemas/address-output'
        - type: object
          properties: {}
