/*
 * Copyright Â© 2018 Vincent Lachenal
 * This work is free. You can redistribute it and/or modify it under the
 * terms of the Do What The Fuck You Want To Public License, Version 2,
 * as published by Sam Hocevar. See the COPYING file for more details.
 */
package com.github.vlachenal.webservices.vertx.bench.dao;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import com.github.vlachenal.webservices.vertx.bench.dto.PhoneDTO;

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonArray;
import io.vertx.ext.sql.ResultSet;
import io.vertx.ext.sql.SQLClient;
import io.vertx.ext.sql.UpdateResult;


/**
 * Phone DAO
 *
 * @author Vincent Lachenal
 */
public class PhoneDAO {

  // Attributes +
  // SQL requests +
  /** Insert phone in database */
  public static final String REQ_ADD_PHONE = "INSERT INTO Phone "
      + "(customer_id,phone_type,number,id) "
      + "VALUES (?,?,?,?)";

  /** Get customer phone SQL request */
  private static final String REQ_GET_CUST_PHONE = "SELECT id,phone_type,number FROM phone WHERE id = ? AND customer_id = ?";

  /** Get customer phones SQL request */
  private static final String REQ_GET_CUST_PHONES = "SELECT id,phone_type,number FROM phone WHERE customer_id = ?";

  /** Delete phone */
  private static final String REQ_DELETE_PHONE = "DELETE FROM phone WHERE id = ? AND customer_id = ?";
  // SQL requests -

  /** JDBC template */
  private final SQLClient jdbc;
  // Attributes -


  // Constructors +
  /**
   * {@link PhoneDAO} constructor
   *
   * @param jdbc the SQl client to use
   */
  public PhoneDAO(final SQLClient jdbc) {
    this.jdbc = jdbc;
  }
  // Constructors -


  // Methods +
  /**
   * Handle list phones SQL result
   *
   * @param result the SQL result
   * @param destination the destination result
   */
  private void handleGetPhonesRes(final AsyncResult<ResultSet> result, final Handler<AsyncResult<List<PhoneDTO>>> destination) {
    if(result.failed()) {
      destination.handle(Future.failedFuture(result.cause()));
    } else {
      destination.handle(result.map(res -> res.getResults().stream()
                                    .map(row -> getPhone(row))
                                    .collect(Collectors.toList())));
    }
  }

  /**
   * Get customer's phones
   *
   * @param customerId the customer's identifier
   * @param destination the destination result
   */
  public void getPhones(final UUID customerId, final Handler<AsyncResult<List<PhoneDTO>>> destination) {
    jdbc.queryWithParams(REQ_GET_CUST_PHONES, new JsonArray(Collections.singletonList(customerId)), res -> handleGetPhonesRes(res, destination));
  }

  /**
   * Handle add phone SQL result
   *
   * @param phoneId the new phone's identifier
   * @param result the SQL result
   * @param destination the destination result
   */
  private void handleAddPhoneRes(final UUID phoneId, final AsyncResult<UpdateResult> result, final Handler<AsyncResult<String>> destination) {
    if(result.failed()) {
      destination.handle(Future.failedFuture(result.cause()));
    } else {
      destination.handle(Future.succeededFuture(phoneId.toString()));
    }
  }

  /**
   * Add phone to customer
   *
   * @param customerId the customer identifier
   * @param phone the phone to add
   * @param destination the destination result
   */
  public void addPhone(final UUID customerId, final PhoneDTO phone, final Handler<AsyncResult<String>> destination) {
    final UUID phoneId = UUID.randomUUID();
    jdbc.updateWithParams(REQ_ADD_PHONE, getPhoneValues(phoneId, phoneId, phone), res -> handleAddPhoneRes(phoneId, res, destination));
  }

  /**
   * Set phone values in prepared statement for insertion.<br>
   * New phone's identifier will be generated by database engine and will not be returned.
   *
   * @param customerId the customer's identifier
   * @param phone the phone
   */
  public JsonArray getPhoneValues(final UUID customerId, final PhoneDTO phone) {
    return getPhoneValues(UUID.randomUUID(), customerId, phone);
  }

  /**
   * Set phone values in prepared statement for insertion
   *
   * @param phoneId the new phone identifier (can be {@code null})
   * @param customerId the customer identifier
   * @param phone the phone
   */
  private JsonArray getPhoneValues(final UUID phoneId, final UUID customerId, final PhoneDTO phone) {
    return new JsonArray(Arrays.asList(customerId, phone.getType().getCode(), phone.getNumber(), phoneId));
  }

  /**
   * Extract phone from result set
   *
   * @param res the result set
   *
   * @return the phone
   */
  public PhoneDTO getPhone(final JsonArray res) {
    final PhoneDTO phone = new PhoneDTO();
    phone.setId(res.getString(0));
    phone.setType(PhoneDTO.Type.fromCode(res.getInteger(1)));
    phone.setNumber(res.getString(2).trim());
    return phone;
  }

  /**
   * Handle get phone SQL result
   *
   * @param result the SQL result
   * @param destination the destination result
   */
  private void handleGetPhoneRes(final AsyncResult<JsonArray> result, final Handler<AsyncResult<PhoneDTO>> destination) {
    if(result.failed()) {
      destination.handle(Future.failedFuture(result.cause()));
    } else {
      destination.handle(result.map(res -> getPhone(res)));
    }
  }

  /**
   * Get phone
   *
   * @param phoneId the phone identifier
   * @param customerId the customer identifier
   * @param destination the destination result
   */
  public void getPhone(final UUID phoneId, final UUID customerId, final Handler<AsyncResult<PhoneDTO>> destination) {
    jdbc.querySingleWithParams(REQ_GET_CUST_PHONE, new JsonArray(Arrays.asList(phoneId, customerId)),
                               res -> handleGetPhoneRes(res, destination));
  }

  /**
   * Handle delete phone SQL result
   *
   * @param result the SQL result
   * @param destination the destination result
   */
  private void handleDeletePhoneRes(final AsyncResult<UpdateResult> result, final Handler<AsyncResult<Void>> destination) {
    if(result.failed()) {
      destination.handle(Future.failedFuture(result.cause()));
    } else {
      destination.handle(Future.succeededFuture());
    }
  }

  /**
   * Delete phone
   *
   * @param phoneId the phone identifier
   * @param customerId the customer identifier
   */
  public void deletePhone(final UUID phoneId, final UUID customerId, final Handler<AsyncResult<Void>> destination) {
    jdbc.updateWithParams(REQ_DELETE_PHONE, new JsonArray(Arrays.asList(phoneId, customerId)), res -> handleDeletePhoneRes(res, destination));
  }
  // Methods -

}
